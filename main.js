import * as XLSX from "xlsx";

// --- Material thicknesses ---
const MATERIAL_THICKNESSES = {
  "–î–°–ü": 16,
  "–ú–î–§": 18,
  "–§–∞–Ω–µ—Ä–∞": 18,
  "–•–î–§": 3
};

// --- Utils ---
function formatNumber(v, digits=1) {
  return (Math.round(v * Math.pow(10, digits)) / Math.pow(10, digits)).toLocaleString('ru-RU');
}

function validateDimension(n, min=5, max=5000) {
  return Number.isFinite(n) && n >= min && n <= max;
}

function validateThickness(t, min=1, max=40) {
  return Number.isFinite(t) && t >= min && t <= max;
}

// --- DOM helpers ---
function el(sel) { return document.querySelector(sel); }

// Helper to create edge select (with current '–ö—Ä–æ–º–∫–∞' value)
function createEdgeSelect(currentValue, edgeOptionsValue) {
  const select = document.createElement('select');
  select.name = 'edge-side';
  const val = typeof currentValue === "string" ? currentValue : "";
  // –ï—Å–ª–∏ –Ω–µ—Ç –∫—Ä–æ–º–∫–∏ ‚Äî –æ–¥–Ω–æ "–ù–µ—Ç" (–ø—É—Å—Ç–æ–µ) –∑–Ω–∞—á–µ–Ω–∏–µ
  if (!edgeOptionsValue) {
    // "–ù–µ—Ç" (–ø—É—Å—Ç–æ)
    const optNone = document.createElement('option');
    optNone.value = '';
    optNone.textContent = '–ù–µ—Ç';
    select.appendChild(optNone);
    select.value = '';
    return select;
  }
  // –ï—Å—Ç—å –∫—Ä–æ–º–∫–∞ ‚Üí "–ù–µ—Ç" –∏ –∫—Ä–æ–º–∫–∞
  [
    {value: '', label: '–ù–µ—Ç'},
    {value: edgeOptionsValue, label: edgeOptionsValue}
  ].forEach(optData => {
    const opt = document.createElement('option');
    opt.value = optData.value;
    opt.textContent = optData.label;
    select.appendChild(opt);
  });
  select.value = val;
  return select;
}

// Modified createPartRow to correctly pass –ö—Ä–æ–º–∫–∞ value from current sheet settings
function createPartRow(idx, part = {}, edgeOptionsValue = "") {
  const tr = document.createElement('tr');
  tr.dataset.idx = idx;

  function input(name, value, type="number", extra={}) {
    const inp = document.createElement('input');
    inp.type = type;
    inp.name = name;
    inp.value = value ?? '';
    if (type === "number") {
      inp.min = extra.min ?? 5;
      inp.max = extra.max ?? 5000;
      inp.step = extra.step ?? 1;
    }
    inp.required = true;
    if (extra.placeholder) inp.placeholder = extra.placeholder;
    if (extra.maxLength) inp.maxLength = extra.maxLength;
    return inp;
  }

  tr.innerHTML = `
    <td>${idx + 1}</td>
    <td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td>
    <td>
      <button type="button" class="delete-part-btn" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
    </td>
  `;
  // –î–ª–∏–Ω–∞
  tr.children[1].appendChild(input('length', part.length, 'number', { min:5, max:5000 }));
  // –®–∏—Ä–∏–Ω–∞
  tr.children[2].appendChild(input('width', part.width, 'number', { min:5, max:5000 }));
  // –ö–æ–ª-–≤–æ
  tr.children[3].appendChild(input('count', part.count ?? 1, 'number', { min:1, max:500 }));

  // TXT (—Ç–µ–∫—Å—Ç—É—Ä–∞) ‚Äî —á–µ–∫–±–æ–∫—Å
  const txtBox = document.createElement('input');
  txtBox.type = 'checkbox';
  txtBox.name = 'texture';
  txtBox.checked = !!part.texture;
  txtBox.style.transform = 'scale(1.2)';
  txtBox.style.cursor = 'pointer';
  tr.children[4].appendChild(txtBox);

  // –í–≤–µ—Ä—Ö/–í–Ω–∏–∑/–õ–µ–≤–æ/–ü—Ä–∞–≤–æ ‚Äî —Å–µ–ª–µ–∫—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏: –Ω–µ—Ç, –∫—Ä–æ–º–∫–∞
  ["top", "bottom", "left", "right"].forEach((side, i) => {
    const sideValue = part[side] || '';
    const select = createEdgeSelect(sideValue, edgeOptionsValue);
    select.dataset.side = side;
    tr.children[5 + i].appendChild(select);
  });

  return tr;
}

// --- State ---
const state = {
  user: {
    firstname: "",
    lastname: "",
    phone: ""
  },
  sheet: {
    width: 2800,
    height: 2070,
    material: "",
    thickness: 16,
    edge: "",
    edgeThickness: "1 –º–º"
  },
  parts: []
};

// --- Sheet Param Controls ---
const sheetSel = el('#sheet-size-select');
const customSheetDiv = el('#custom-sheet-size');
const sheetWidthInp = el('#sheet-width');
const sheetHeightInp = el('#sheet-height');
const sheetMaterialInp = el('#sheet-material');
const sheetThicknessInp = el('#sheet-thickness');
const sheetEdgeInp = el('#sheet-edge');
const edgeThicknessSel = el('#edge-thickness');

function syncSheetFromInputs() {
  state.sheet.width = parseInt(sheetWidthInp.value) || 2800;
  state.sheet.height = parseInt(sheetHeightInp.value) || 2070;
  state.sheet.material = sheetMaterialInp.value.trim();
  let th = parseFloat(sheetThicknessInp.value);
  if (!validateThickness(th)) th = 16;
  state.sheet.thickness = th;
  state.sheet.edge = sheetEdgeInp.value.trim();
  state.sheet.edgeThickness = edgeThicknessSel.value;
}

sheetSel.addEventListener('change', () => {
  if (sheetSel.value === "custom") {
    customSheetDiv.style.display = "";
    sheetWidthInp.disabled = false; sheetHeightInp.disabled = false;
  } else {
    let w = 2800, h = 2070;
    if (sheetSel.value === "2500x1830") { w = 2500; h = 1830; }
    customSheetDiv.style.display = "none";
    sheetWidthInp.value = w;
    sheetHeightInp.value = h;
    sheetWidthInp.disabled = true; sheetHeightInp.disabled = true;
  }
  syncSheetFromInputs();
  repaintEverything();
  repaintPartsTable(); // update edge selects in parts
});
[sheetWidthInp, sheetHeightInp, sheetMaterialInp, sheetThicknessInp, sheetEdgeInp, edgeThicknessSel].forEach(inp=>
  inp.addEventListener('input', () => {
    syncSheetFromInputs();
    repaintEverything();
    repaintPartsTable(); // update edge selects in parts if "–ö—Ä–æ–º–∫–∞" changed
  })
);
edgeThicknessSel.addEventListener('change', () => {
  syncSheetFromInputs();
  repaintEverything();
  repaintPartsTable();
});

// --- Parts Table Logic ---
const partsTbody = el('#parts-tbody');
function makePartObj(tr) {
  const length = parseInt(tr.querySelector('[name=length]').value);
  const width = parseInt(tr.querySelector('[name=width]').value);
  const count = parseInt(tr.querySelector('[name=count]').value);
  const texture = tr.querySelector('[name=texture]').checked ? "–¥–∞" : "";
  // –í–≤–µ—Ä—Ö/–í–Ω–∏–∑/–õ–µ–≤–æ/–ü—Ä–∞–≤–æ —Ç–µ–ø–µ—Ä—å –∏–∑ —Å–µ–ª–µ–∫—Ç–æ–≤ edge-side
  const selects = tr.querySelectorAll('select[name="edge-side"]');
  const sides = {};
  selects.forEach(sel => {
    const side = sel.dataset.side;
    sides[side] = sel.value ?? '';
  });
  return {
    length,
    width,
    count,
    texture,
    top: sides.top,
    bottom: sides.bottom,
    left: sides.left,
    right: sides.right
  };
}

function repaintPartsTable() {
  partsTbody.innerHTML = '';
  // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é –∫—Ä–æ–º–∫—É
  const edgeOpt = (state.sheet && state.sheet.edge) ? state.sheet.edge : "";
  state.parts.forEach((part, idx) => {
    const tr = createPartRow(idx, part, edgeOpt);
    partsTbody.appendChild(tr);
  });
}
function updatePartsFromTable() {
  const trs = partsTbody.querySelectorAll('tr');
  state.parts = [];
  trs.forEach(tr=>{
    state.parts.push(makePartObj(tr));
  });
}

function validateParts() {
  let ok = true, msg = '';
  state.parts.forEach((p, idx) => {
    if (!validateDimension(p.length) || !validateDimension(p.width)) {
      ok = false;
      msg = `–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–µ—Ç–∞–ª–∏ ‚Ññ${idx+1}: –¥–ª–∏–Ω–∞ –∏ —à–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 5‚Äì5000 –º–º.`;
    }
    if (!Number.isFinite(p.count) || p.count < 1) {
      ok = false;
      msg = `–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É –¥–µ—Ç–∞–ª–∏ ‚Ññ${idx+1}.`;
    }
  });
  return ok ? null : msg;
}

function addPart(part) {
  if (!part) {
    part = { length: 300, width: 300, count: 1, texture: "", top: "", bottom: "", left: "", right: "" };
  }
  state.parts.push(part);
  repaintPartsTable();
  repaintEverything();
}
el('#add-part-btn').addEventListener('click', () => addPart());

// Delegate change events for inputs in parts table:
partsTbody.addEventListener('input', ()=>{
  updatePartsFromTable();
  repaintEverything();
});
partsTbody.addEventListener('change', ()=>{
  updatePartsFromTable();
  repaintEverything();
});
partsTbody.addEventListener('click', (e)=>{
  if (e.target.classList.contains('delete-part-btn')) {
    const idx = parseInt(e.target.closest('tr').dataset.idx,10);
    state.parts.splice(idx,1);
    repaintPartsTable();
    repaintEverything();
  }
});

// --- Calculation ---
function getAllUsedArea() {
  // –≤ mm^2
  return state.parts.reduce((acc,p)=>acc+(p.length*p.width*p.count),0);
}
function getSheetArea() {
  return state.sheet.width * state.sheet.height;
}
function wastePercent() {
  const used = getAllUsedArea();
  const total = getSheetArea();
  if (!used || !total) return 0;
  return Math.max(0, 100 - (used/total)*100);
}

function repaintEverything() {
  // –ü–ª–æ—â–∞–¥—å –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–æ–≤
  const mm2toM2 = 1e-6;
  const usedArea = getAllUsedArea()*mm2toM2;
  el('#used-area').textContent = formatNumber(usedArea, 2);

  const waste = wastePercent();
  el('#waste-percent').textContent = formatNumber(waste, 1);
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Excel
function exportToExcel() {
  // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const fname = (state.user.firstname || '').trim();
  const lname = (state.user.lastname || '').trim();
  const phone = (state.user.phone || '').trim();

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫, –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å–ª—É–∂–µ–±–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
  const mainTitle = "–®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∫—Ä–∞—Å–∫–∏";
  const subTitle = "–¢–µ–∫—Å—Ç—É—Ä–∞: X - –≤–¥–æ–ª—å, Y - –ø–æ–ø–µ—Ä—ë–∫. –ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫—Ä–æ–º–∫–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.";
  const contactInfo = [
    `–ò–º—è: ${fname}  –§–∞–º–∏–ª–∏—è: ${lname}  –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`
  ];

  // –°—Ç–æ–ª–±—Ü—ã —à–∞–±–ª–æ–Ω–∞ (–ø–æ —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç—É—Ä–∞, –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—Ä–æ–º–∫–∏)
  const header = [
    "‚Ññ",
    "–î–ª–∏–Ω–∞ (–º–º)",
    "–®–∏—Ä–∏–Ω–∞ (–º–º)",
    "–ö–æ–ª-–≤–æ",
    "TXT (—Ç–µ–∫—Å—Ç—É—Ä–∞)",
    "–í–≤–µ—Ä—Ö",
    "–í–Ω–∏–∑",
    "–õ–µ–≤–æ",
    "–ü—Ä–∞–≤–æ"
  ];

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
  const rows = state.parts.map((p, idx) => [
    idx+1,
    p.length || "",
    p.width || "",
    p.count || "",
    p.texture ? '‚úî' : "",
    p.top || "",
    p.bottom || "",
    p.left || "",
    p.right || ""
  ]);
  
  const sheetInfo = [
    [
      `–†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞: ${state.sheet.width} x ${state.sheet.height} –º–º, –º–∞—Ç–µ—Ä–∏–∞–ª: ${state.sheet.material}, –∫—Ä–æ–º–∫–∞: ${state.sheet.edge} (${state.sheet.edgeThickness}), —Ç–æ–ª—â–∏–Ω–∞: ${state.sheet.thickness} –º–º`
    ]
  ];

  // –°–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const ws_data = [];
  ws_data.push([mainTitle]);
  ws_data.push([subTitle]);
  ws_data.push(contactInfo);
  ws_data.push([]); // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
  ws_data.push(header);
  rows.forEach(row => ws_data.push(row));
  ws_data.push([]);
  ws_data.push(...sheetInfo);

  // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ Excel
  const ws = XLSX.utils.aoa_to_sheet(ws_data);

  // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞: —á–µ—Ç–∫–∏–µ "–∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏"
  if (!ws['!merges']) ws['!merges'] = [];
  // A1:I1, A2:I2, A3:I3 (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å)
  ws["!merges"].push({s: {r: 0, c: 0}, e: {r: 0, c: header.length}});
  ws["!merges"].push({s: {r: 1, c: 0}, e: {r: 1, c: header.length}});
  ws["!merges"].push({s: {r: 2, c: 0}, e: {r: 2, c: header.length}});

  const borderStyle = {
    top: {style: "thin", color: {rgb:"000000"}},
    bottom: {style: "thin", color: {rgb:"000000"}},
    left: {style: "thin", color: {rgb:"000000"}},
    right: {style: "thin", color: {rgb:"000000"}}
  };

  // –û–±–≤–æ–∂—É —Ä–∞–º–∫–∞–º–∏ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
  const firstDataRow = 4, lastDataRow = 4+rows.length;
  for (let r = firstDataRow; r <= lastDataRow; r++) {
    for (let c = 0; c < header.length; c++) {
      const cellRef = XLSX.utils.encode_cell({r, c});
      if (!ws[cellRef]) continue;
      ws[cellRef].s = {
        border: borderStyle,
        alignment: {horizontal: "center", vertical:"center", wrapText: true},
        font: r===firstDataRow ? {bold:true} : {}
      };
    }
  }

  // –†–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫
  ws['!rows'] = [];
  ws['!rows'][0] = {hpt: 22};
  ws['!rows'][1] = {hpt: 18};
  ws['!rows'][2] = {hpt: 15};
  ws['!rows'][firstDataRow] = {hpt: 23}; // header
  for(let r=firstDataRow+1; r<=lastDataRow; r++) ws['!rows'][r] = {hpt:20};

  // –®–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ –≤–∏–¥—É
  ws['!cols'] = [
    {wch:6},   // –Ω–æ–º–µ—Ä
    {wch:12},  // –¥–ª–∏–Ω–∞
    {wch:12},  // —à–∏—Ä–∏–Ω–∞
    {wch:7},   // –∫–æ–ª-–≤–æ
    {wch:16},  // —Ç–µ–∫—Å—Ç—É—Ä–∞
    {wch:10},  // –≤–≤–µ—Ä—Ö
    {wch:10},  // –≤–Ω–∏–∑
    {wch:10},  // –ª–µ–≤–æ
    {wch:10}   // –ø—Ä–∞–≤–æ
  ];

  // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫—Ä—É–ø–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const mainTitleCell = ws["A1"];
  if (mainTitleCell) {
    mainTitleCell.s = {
      font: {bold: true, sz: 15},
      alignment: {horizontal:"center", vertical:"center"}
    };
  }
  const subTitleCell = ws["A2"];
  if (subTitleCell) {
    subTitleCell.s = {
      font: {italic: true, sz: 10},
      alignment: {wrapText: true, horizontal:"center", vertical:"center"}
    };
  }
  const contactCell = ws["A3"];
  if (contactCell) {
    contactCell.s = {
      font: {sz: 11},
      alignment: {horizontal: "left", vertical:"center"}
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ —Å—Ç—Ä–æ–∫–∏ –æ –ª–∏—Å—Ç–µ
  const summaryRowIdx = lastDataRow + 2;
  for (let c = 0; c <= header.length; c++) {
    const cellRef = XLSX.utils.encode_cell({r: summaryRowIdx, c});
    if (ws[cellRef]) {
      ws[cellRef].s = {
        border: borderStyle,
        font: {italic: true, color:{rgb:"365881"}},
        alignment: {wrapText:true}
      };
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (translit for filename, fallback if not found)
  function filenameSafe(s) {
    return (s || "")
      .toLowerCase()
      .replace(/[–∞-—è—ë]/g, ch =>
        ("abvgdezijklmnoprstufhcy".split('')[
          "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á".indexOf(ch)
        ] || "x")
      )
      .replace(/\s+/g,"_").replace(/[^a-z0-9_]/g,"");
  }
  let fnameOut = (fname && lname)
    ? `zakaz-${filenameSafe(lname)}-${filenameSafe(fname)}`
    : "zakaz";
  XLSX.utils.book_new();
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, "–®–∞–±–ª–æ–Ω_–ø–æ–∫—Ä–∞—Å–∫–∏");
  XLSX.writeFile(wb, `${fnameOut}.xlsx`);
}

// -- Export section --
el('#export-excel-btn').addEventListener('click', e=>{
  // validate user
  state.user.firstname = el('#user-firstname').value.trim();
  state.user.lastname = el('#user-lastname').value.trim();
  state.user.phone = el('#user-phone').value.trim();
  if (!state.user.firstname || !state.user.lastname || !state.user.phone) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!");
    return;
  }
  updatePartsFromTable();
  if (state.parts.length<1) {
    alert("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–µ—Ç–∞–ª—å!");
    return;
  }
  syncSheetFromInputs();
  const err = validateParts();
  if (err) { alert(err); return; }
  exportToExcel();
});

// --- Init ---
window.addEventListener('DOMContentLoaded', ()=>{
  state.user.firstname = "";
  state.user.lastname = "";
  state.user.phone = "";
  syncSheetFromInputs();
  // –î–æ–±–∞–≤–∏–º –∑–∞–≥–æ—Ç–æ–≤–∫—É –¥–µ—Ç–∞–ª–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  addPart({length:600, width:400, count:2, texture:"", top:"", bottom:"", left:"", right:""});
  repaintPartsTable();
  repaintEverything();
});